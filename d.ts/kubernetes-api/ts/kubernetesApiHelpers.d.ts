/// <reference path="kubernetesApiGlobals.d.ts" />
declare module KubernetesAPI {
    function currentKubernetesNamespace(): any;
    function kubernetesNamespacePath(): string;
    function apiPrefix(): string;
    function osApiPrefix(): string;
    function masterApiUrl(): string;
    function kubernetesApiPrefix(): string;
    function openshiftApiPrefix(): string;
    function prefixForKind(kind: string): string;
    function kubernetesApiUrl(): string;
    function openshiftApiUrl(): string;
    function updateOrCreateObject(object: any, KubernetesModel: any, success?: (data) => void, error?: (error) => void): void;
    function createResource(thing: string, urlTemplate: string, $resource: ng.resource.IResourceService, KubernetesModel: any): ng.resource.IResourceClass;
    function imageRepositoriesRestURL(): string;
    function deploymentConfigsRestURL(): string;
    function buildsLogsRestURL(): string;
    function buildsRestURL(): string;
    function buildConfigHooksRestURL(): string;
    function buildConfigsRestURL(): string;
    function routesRestURL(): string;
    function templatesRestURL(): string;
    function wsScheme(url: string): string;
    function wsUrl(url: string): URI;
    function equals(left: any, right: any): boolean;
    function getUID(entity: any): any;
    function getNamespace(entity: any): any;
    function getLabels(entity: any): any;
    function getName(entity: any): any;
    function getKind(entity: any): any;
    function getSelector(entity: any): any;
    function getHost(pod: any): any;
    function getStatus(pod: any): any;
    function getPorts(service: any): any;
    function getCreationTimestamp(entity: any): any;
    var mbean: string;
    var managerMBean: string;
    var appViewMBean: string;
    function isKubernetes(workspace: any): boolean;
    function isKubernetesTemplateManager(workspace: any): boolean;
    function isAppView(workspace: any): boolean;
    function setJson($scope: any, id: any, collection: any): void;
    function labelsToString(labels: any, seperatorText?: string): string;
    function serviceLinkUrl(service: any): any;
    function createPodCounters(selector: any, pods: any, outputPods?: any[], podLinkQuery?: any): {
        podsLink: string;
        valid: number;
        waiting: number;
        error: number;
    };
    function convertKubernetesJsonToItems(json: any): any[];
    function isV1beta1Or2(): boolean;
    function entityPageLink(entity: any): string;
    function resourceKindToUriPath(kind: any): string;
    function kubernetesUrlForKind(KubernetesApiURL: any, kind: any, namespace?: any, path?: any): string;
    function kubernetesUrlForItemKind(KubernetesApiURL: any, json: any): string;
    function kubernetesProxyUrlForService(KubernetesApiURL: any, service: any, path?: any): string;
    function buildConfigRestUrl(id: any): string;
    function deploymentConfigRestUrl(id: any): string;
    function imageRepositoryRestUrl(id: any): string;
    function buildRestUrl(id: any): string;
    function buildLogsRestUrl(id: any): string;
    function isRunning(podCurrentState: any): any;
    function selectorMatches(selector: any, labels: any): boolean;
    function getServiceRegistry(): any;
    function resizeController($http: any, KubernetesApiURL: any, replicationController: any, newReplicas: any, onCompleteFn?: any): void;
    function podStatus(pod: any): any;
    function gitPathToUrl(iconPath: any, branch?: string): string;
    function toRawJson(item: any): string;
}
